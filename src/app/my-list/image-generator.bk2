'use client';

import React, { forwardRef } from 'react';
import clsx from 'clsx';
import { Sprout, Check } from 'lucide-react';

// Define allowed font families for better type safety and auto-completion
type FontClasses = 'font-sans' | 'font-serif' | 'font-mono' | 'font-handwriting' | 'font-headline' | 'font-display';

// Define the structure for a list item
export interface ListItem {
  id: string;
  text: string;
  completed: boolean;
}

// Define the customizable options for the image generator
// All color properties are now expected to be hex strings (e.g., '#123456')
export interface ImageOptions {
  textColor?: string; // Hex color string (e.g., '#123456')
  backgroundColor?: string; // Hex color string (e.g., '#abcdef')
  font?: FontClasses; // Overall font for the list items and general text
  titleColor?: string; // Hex color string
  itemNumberColor?: string; // Hex color string
  completedItemTextColor?: string; // Hex color string for completed items
  completedItemIconColor?: string; // Hex color string for the checkmark icon
}

// Props for the ImageGenerator component
interface ImageGeneratorProps {
  items: ListItem[];
  listTitle: string;
  options?: ImageOptions; // Options are now expected to be passed, with hex colors
}

export const ImageGenerator = forwardRef<HTMLDivElement, ImageGeneratorProps>(({ items, listTitle, options }, ref) => {

  // Default hex colors if options are not provided or specific color is undefined
  const defaultColors = {
    backgroundColor: '#fefae0',
    textColor: '#1f2937', // text-gray-800
    titleColor: '#d4a373',
    itemNumberColor: '#9ca3af', // text-gray-400
    completedItemTextColor: '#6b7280', // text-gray-500
    completedItemIconColor: '#16a34a', // text-green-600
  };

  console.log(`In image generator code heres the options:`)
  console.log(options)

  // Apply background color using inline style
  const containerStyle = {
    backgroundColor: options?.backgroundColor || defaultColors.backgroundColor,
  };

  // Determine the main container's font class (still a Tailwind class)
  const mainFontClass = options?.font || "font-sans";

  // Combine font class for the main content container
  const mainContentClasses = clsx(
    "w-full h-full p-12 flex flex-col",
    mainFontClass
  );

  return (
    <div
      ref={ref}
      style={{
        // These styles are typically used for off-screen rendering
        // for image generation purposes, not for display in the browser.
        position: 'absolute',
        left: '-9999px',
        width: '1080px',
        height: '1920px',
      }}
    >
      <div className={mainContentClasses} style={containerStyle}>
        {/* Title Section */}
        <div className="text-center mb-8">
          <h1
            className={clsx("text-8xl font-bold font-headline")}
            style={{ color: options?.titleColor || defaultColors.titleColor }}
          >
            {listTitle}
          </h1>
        </div>

        {/* List Items Section */}
        <ul className="text-3xl flex-grow space-y-1">
          {items.slice(0, 30).map((item, index) => {
            // Apply item number color using inline style
            const itemNumberStyle = {
              color: options?.itemNumberColor || defaultColors.itemNumberColor,
            };

            // Apply item text color and font using inline style and Tailwind class
            const itemTextStyle = {
              color: item.completed
                ? (options?.completedItemTextColor || defaultColors.completedItemTextColor)
                : (options?.textColor || defaultColors.textColor),
            };

            // Combine font class for item text
            const itemTextFontClass = options?.font || "font-handwriting";

            return (
              <li key={item.id} className="flex items-start text-4xl">
                <span
                  className={clsx("w-14 font-sans text-right mr-4 text-3xl pt-1")}
                  style={itemNumberStyle}
                >
                  {index + 1}.
                </span>
                <div className="flex items-center flex-1">
                  <span
                    className={clsx(itemTextFontClass, item.completed && 'line-through')}
                    style={itemTextStyle}
                  >
                    {item.text}
                  </span>
                  {item.completed && (
                    <Check
                      className="h-10 w-10 ml-4"
                      style={{ color: options?.completedItemIconColor || defaultColors.completedItemIconColor }}
                    />
                  )}
                </div>
              </li>
            );
          })}
        </ul>

        {/* Footer Section */}
        <div className="text-center mt-8 flex items-center justify-center text-2xl" style={{ fontFamily: 'georgia, "times new roman", serif', color: defaultColors.titleColor }}>
          <Sprout className="h-6 w-6 mr-3" /> before30bucket.app
        </div>
      </div>
    </div>
  );
});

ImageGenerator.displayName = 'ImageGenerator';
