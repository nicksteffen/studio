'use client';

import React, { forwardRef } from 'react';
import clsx from 'clsx';
import { Sprout, Check } from 'lucide-react';

// Define allowed font families for better type safety and auto-completion
type FontClasses = 'font-sans' | 'font-serif' | 'font-mono' | 'font-handwriting' | 'font-headline' | 'font-display';

// Define the structure for a list item
export interface ListItem {
  id: string;
  text: string;
  completed: boolean;
}

// Define the customizable options for the image generator
export interface ImageOptions {
  textColor?: string; // Tailwind text color class (e.g., 'text-blue-500' or 'text-[#123456]')
  backgroundColor?: string; // Tailwind background color class (e.g., 'bg-red-200' or 'bg-[#abcdef]')
  font?: FontClasses; // Overall font for the list items and general text
  titleColor?: string; // Tailwind text color class for the title
  itemNumberColor?: string; // Tailwind text color class for the item numbers
  completedItemTextColor?: string; // Tailwind text color class for completed items
  completedItemIconColor?: string; // Tailwind text color class for the checkmark icon
}

// Props for the ImageGenerator component
interface ImageGeneratorProps {
  items: ListItem[];
  listTitle: string;
  options?: ImageOptions;
}

export const ImageGenerator = forwardRef<HTMLDivElement, ImageGeneratorProps>(({ items, listTitle, options }, ref) => {
  // Determine the main container's background color class
  console.log("options:")
  console.log(options)
  const mainBackgroundColorClass = options?.backgroundColor || "bg-[#fefae0]";
  console.log(mainBackgroundColorClass)

  // Determine the main container's font class
  const mainFontClass = options?.font || "font-sans";

  // Combine all classes for the main content container
  const mainContentClasses = clsx(
    "w-full h-full p-12 flex flex-col",
    mainBackgroundColorClass,
    mainFontClass
  );

  // Determine the title's text color class
  const titleTextColorClass = options?.titleColor || "text-[#d4a373]";

  return (
    <div
      ref={ref}
      style={{
        // These styles are typically used for off-screen rendering
        // for image generation purposes, not for display in the browser.
        position: 'absolute',
        left: '-9999px',
        width: '1080px',
        height: '1920px',
      }}
    >
      <div className={mainContentClasses}>
        {/* Title Section */}
        <div className="text-center mb-8">
          <h1 className={clsx("text-8xl font-bold font-headline", titleTextColorClass)}>
            {listTitle}
          </h1>
        </div>

        {/* List Items Section */}
        <ul className="text-3xl flex-grow space-y-1">
          {items.slice(0, 30).map((item, index) => {
            // Determine the item number's text color class
            const itemNumberColorClass = options?.itemNumberColor || "text-gray-400";

            // Determine the item text's color and font classes
            // const itemTextClasses = clsx(
            //   options?.textColor || "text-gray-800", // Default item text color
            //   options?.font || "font-handwriting", // Default item font
            //   item.completed && (options?.completedItemTextColor || 'line-through text-gray-500') // Apply line-through and custom color if completed
            // );


            const itemTextClasses = clsx(
              options?.font || "font-handwriting", // Default item font
              // Apply specific text color based on completion status
              item.completed
                ? (options?.completedItemTextColor || 'text-gray-500') // If completed, use completed text color or default gray
                : (options?.textColor || "text-gray-800"), // If not completed, use regular text color or default gray
              item.completed && 'line-through' // Apply line-through if completed
            );

            // Determine the completed icon's color class
            const completedIconColorClass = options?.completedItemIconColor || "text-green-600";

            return (
              <li key={item.id} className="flex items-start text-4xl">
                <span className={clsx("w-14 font-sans text-right mr-4 text-3xl pt-1", itemNumberColorClass)}>
                  {index + 1}.
                </span>
                <div className="flex items-center flex-1">
                  <span className={itemTextClasses}>
                    {item.text}
                  </span>
                  {item.completed && <Check className={clsx("h-10 w-10 ml-4", completedIconColorClass)} />}
                </div>
              </li>
            );
          })}
        </ul>

        {/* Footer Section */}
        <div className="text-center mt-8 flex items-center justify-center text-2xl text-[#d4a373]" style={{ fontFamily: 'georgia, "times new roman", serif' }}>
          <Sprout className="h-6 w-6 mr-3" /> before30bucket.app
        </div>
      </div>
    </div>
  );
});

ImageGenerator.displayName = 'ImageGenerator';
